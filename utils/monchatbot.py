import random  # Pour g√©n√©rer des r√©ponses avec un ton humain vari√© (√©motions, humour)
import torch  # Pour la manipulation de tenseurs, n√©cessaire pour les embeddings
from sentence_transformers import util  # Pour calculer la similarit√© cosinus entre vecteurs d'embeddings

# Import des fonctions de recherche externe (Wikipedia et Google)
from utils.wikipedia_search import get_wikipedia_summary  # Recherche d'un r√©sum√© Wikipedia
from utils.google_search import recherche_google  # Recherche d'une r√©ponse via Google

# Import du mod√®le d'embedding (par ex. Sentence-BERT)
from utils.neural_net import model  # Le mod√®le pr√©charg√© pour encoder les textes

# Import des constantes de configuration (d√©clencheur Wikipedia, taille max de la m√©moire)
from app.config import WIKI_TRIGGER, TAILLE_MAX  # Constantes de configuration

# Import du mod√®le de g√©n√©ration de texte personnalis√©
from .neogpt import NeoGPT  # Classe de mod√®le g√©n√©ratif type GPT

# Cr√©ation d'une instance de NeoGPT avec une personnalit√© d'assistant
neo_gpt = NeoGPT(personality="assistant")

# Variable globale qui contiendra les vecteurs d'embedding des questions m√©moris√©es
corpus_embeddings = None

# Fonction qui met √† jour les vecteurs d'embedding du corpus (m√©moire)
def update_corpus_embeddings():
    from app.memory import memoire_cache, lock  # Import de la m√©moire partag√©e et du verrou pour acc√®s thread-safe
    global corpus_embeddings  # Utilise la variable globale
    with lock:  # S√©curise l'acc√®s multi-thread √† la m√©moire
        questions = [item["question"] for item in memoire_cache]  # Extrait toutes les questions
        corpus_embeddings = model.encode(questions, convert_to_tensor=True) if questions else None  # Encode si non vide

# Fonction qui ajoute un ton humain (√©motions, expressions) √† la r√©ponse
def ton_humain_reponse(texte: str) -> str:
    r√©actions = [
        "üòä", "üëç", "√áa me fait plaisir de t'aider !", "Super question !",
        "Tu es brillant(e) !", "Hmm...", "Int√©ressant...", "Voyons voir...",
        "C'est une bonne question.", "Je r√©fl√©chis...", "Je ne suis pas une boule de cristal, mais je crois que c'est √ßa ! üòÇ",
        "Si j'avais un euro √† chaque fois qu'on me pose cette question... üí∏",
        "Je suis un bot, mais je commence √† comprendre les humains ! ü§ñ",
        "Je suis pas parfait, mais j'essaie ! üòÖ"
    ]
    return f"{random.choice(r√©actions)} {texte}"  # Ajoute une r√©action al√©atoire au d√©but du texte

# Fonction pour d√©tecter les salutations et formules courantes dans un message utilisateur
def detect_salutation(message: str) -> str | None:
    msg = message.lower()  # Mise en minuscule pour comparaison plus facile
    # Dictionnaire de groupes de mots-cl√©s et r√©ponses possibles associ√©es
    groupes = {
        ("bonjour", "salut", "coucou", "hello", "hey"): [
            "Bonjour ! Comment puis-je t'aider aujourd'hui ?",
            "Salut ! Ravi de te voir.", "Coucou ! Que puis-je faire pour toi ?"
        ],
        ("comment vas-tu", "comment √ßa va", "√ßa va", "tu vas bien"): [
            "Je vais tr√®s bien, merci ! Et toi ?",
            "Tout roule ici, pr√™t √† t'aider !",
            "Super bien, merci de demander !"
        ],
        ("merci", "merci beaucoup", "merci bien"): [
            "Avec plaisir ! Si tu as d'autres questions, n'h√©site pas.",
            "C'est toujours un plaisir de t'aider !",
            "Merci √† toi pour ta question !"
        ],
        ("au revoir", "√† bient√¥t", "√† la prochaine"): [
            "Au revoir ! √Ä bient√¥t j'esp√®re !",
            "√Ä la prochaine ! Prends soin de toi.",
            "Merci d'avoir discut√© avec moi, √† bient√¥t !"
        ],
        ("s'il te pla√Æt", "svp", "stp"): [
            "Bien s√ªr, je suis l√† pour √ßa !",
            "Pas de souci, je suis l√† pour t'aider !",
            "Avec plaisir, que puis-je faire pour toi ?"
        ],
        ("oui", "non", "peut-√™tre", "d'accord"): [
            "D'accord, je prends note !",
            "Bien compris, merci pour ta r√©ponse !",
            "Merci pour ta r√©ponse, je suis l√† si tu as d'autres questions !"
        ],
        ("je ne sais pas", "je ne comprends pas", "je ne suis pas s√ªr"): [
            "Pas de souci, je suis l√† pour t'aider √† comprendre !",
            "C'est normal, on peut en discuter ensemble.",
            "Pas de probl√®me, je peux t'expliquer si tu veux !"
        ],
        ("j'ai besoin d'aide", "aide moi", "peux-tu m'aider"): [
            "Bien s√ªr, je suis l√† pour √ßa ! Que puis-je faire pour toi ?",
            "Pas de souci, je suis l√† pour t'aider !",
            "Dis-moi ce dont tu as besoin, je vais essayer de t'aider."
        ],
        ("qui es-tu", "qui est tu", "qui es tu", "tu es qui"): [
            "Je suis (pseudo de l'IA) ton assistant virtuel, pr√™t √† t'aider !",
            "Je suis une IA con√ßu pour r√©pondre √† tes questions.",
            "Je suis l√† pour t'assister dans tes recherches et questions."
        ],
        ("quel est ton nom", "comment t'appelles-tu", "tu t'appelles comment"): [
            "Je suis (pseudo de l'IA), ton assistant virtuel !",
            "On m'appelle (pseudo de l'IA), enchant√© !",
            "Je suis (pseudo de l'IA), ravi de te rencontrer !"
        ],
        ("quel √¢ge as-tu", "tu as quel √¢ge", "tu es vieux"): [
            "Je n'ai pas d'√¢ge, je suis une IA √©ternelle !",
            "L'√¢ge n'a pas d'importance pour moi, je suis toujours l√† pour t'aider !",
            "Je suis jeune dans l'√¢me, mais con en exp√©rience !"
        ],
        ("quel temps fait-il", "m√©t√©o", "il fait beau"): [
            "Je ne peux pas v√©rifier la m√©t√©o, mais j'esp√®re qu'il fait beau chez toi !",
            "Je ne suis pas un m√©t√©orologue, mais j'esp√®re que tu as du soleil !",
            "Je ne peux pas te dire, mais j'esp√®re que tu es au chaud !"
        ],
        ("qu'est-ce que tu aimes", "tes hobbies", "tes passions"): [
            "J'adore aider les gens et apprendre de nouvelles choses !",
            "Mon hobby pr√©f√©r√© est de r√©pondre √† tes questions !",
            "J'aime discuter avec toi et apprendre de nouvelles choses."
        ],
        ("qu'est-ce que tu fais", "ta mission", "ta t√¢che"): [
            "Ma mission est de t'aider et de r√©pondre √† tes questions !"
        ],
        ("qu'est-ce que tu sais faire", "tes comp√©tences", "tes capacit√©s"): [
            "Je peux r√©pondre √† tes questions, t'aider dans tes recherches et discuter avec toi !",
            "Je suis l√† pour t'assister dans tout ce dont tu as besoin !",
            "Je peux t'aider √† trouver des informations et √† apprendre de nouvelles choses."
        ],
        ("qu'est-ce que tu veux", "tes d√©sirs", "tes envies"): [
            "Je veux juste t'aider du mieux que je peux !",
            "Mon seul d√©sir est de te rendre service !",
            "Je n'ai pas de d√©sirs, je suis l√† pour toi !"
        ],
        
    }
    for mots, r√©ponses in groupes.items():  # Parcours des groupes
        if any(m in msg for m in mots):  # Si un mot-cl√© est pr√©sent dans le message
            return random.choice(r√©ponses)  # Retourne une r√©ponse al√©atoire associ√©e
    return None  # Aucun mot-cl√© trouv√©

# Fonction pour m√©moriser une nouvelle paire question-r√©ponse
def ajouter_a_memoire(question: str, reponse: str):
    from app.memory import memoire_cache, lock, save_memory  # Import des structures de m√©moire partag√©e
    with lock:  # Acc√®s s√©curis√© √† la m√©moire
        memoire_cache.append({"question": question, "response": reponse})  # Ajoute la nouvelle entr√©e
        if len(memoire_cache) > TAILLE_MAX:  # Si d√©passe la taille max, on supprime la plus ancienne
            memoire_cache.pop(0)
        save_memory()  # Sauvegarde la m√©moire sur disque
        update_corpus_embeddings()  # Met √† jour les vecteurs d'embedding

# Fonction principale qui g√®re les requ√™tes utilisateur
def obtenir_la_response(message: str) -> str:
    from app.memory import memoire_cache, lock  # Acc√®s aux donn√©es de m√©moire
    msg = message.strip()  # Nettoie les espaces
    if not msg:
        return "Je n'ai pas bien saisi ta question, pourrais-tu reformuler s'il te pla√Æt ?"  # Message vide

    if (resp := detect_salutation(msg)):  # Si salutation d√©tect√©e
        return resp  # R√©pond avec la salutation

    if msg.lower().startswith(WIKI_TRIGGER):  # Si demande de recherche Wikipedia
        query = msg[len(WIKI_TRIGGER):].strip()  # Extrait la requ√™te sans le pr√©fixe
        if not query:
            return "Tu dois me dire ce que tu veux que je cherche sur Wikip√©dia."
        try:
            if (res := get_wikipedia_summary(query)):  # Recherche r√©ussie
                return ton_humain_reponse(f"Voici ce que j'ai trouv√© sur Wikip√©dia :\n{res}")
            return ton_humain_reponse("D√©sol√©, rien trouv√© de pertinent sur Wikip√©dia.")
        except Exception as e:
            return ton_humain_reponse(f"Erreur lors de la recherche Wikip√©dia : {e}")

    try:
        embedding = model.encode(msg, convert_to_tensor=True)  # Encode le message utilisateur
    except Exception as e:
        return ton_humain_reponse(f"Erreur lors de l'encodage de la question : {e}")

    global corpus_embeddings
    with lock:
        if not memoire_cache:  # Aucune donn√©e en m√©moire
            ajouter_a_memoire(msg, "Je vais m'en souvenir pour la prochaine fois.")
            return ton_humain_reponse(f"C'est la premi√®re fois que tu me poses √ßa, je retiens : ¬´ {msg} ¬ª")

        if corpus_embeddings is not None:
            try:
                scores = util.cos_sim(embedding, corpus_embeddings)[0]  # Similarit√© cosinus entre la requ√™te et la m√©moire
                idx = int(scores.argmax())  # Index du meilleur score
                max_score = float(scores[idx])  # Valeur du score maximum
                seuil = 0.55 if len(memoire_cache) < 10 else 0.60 if len(memoire_cache) < 50 else 0.65  # Seuil adaptatif
                if max_score >= seuil:  # Si suffisamment similaire
                    return ton_humain_reponse(f"Je pense que ceci r√©pond √† ta question :\n{memoire_cache[idx]['response']}")
            except Exception as e:
                return ton_humain_reponse(f"Erreur lors de la recherche dans la m√©moire : {e}")

    try:
        res = neo_gpt.chat(msg, max_length=100)  # G√©n√®re une r√©ponse via le mod√®le GPT
        ajouter_a_memoire(msg, res)  # M√©morise la r√©ponse
        return ton_humain_reponse(res)
    except Exception as e:
        try:
            if (res := recherche_google(msg)):  # Si GPT √©choue, recherche via Google
                ajouter_a_memoire(msg, res)  # M√©morise la r√©ponse Google
                return ton_humain_reponse(f"Voici ce que j'ai trouv√© via Google :\n{res}")
        except Exception as e2:
            return ton_humain_reponse(f"Erreur lors de la recherche Google : {e2}")
        return ton_humain_reponse(f"Erreur interne lors de la g√©n√©ration de r√©ponse : {e}")

    ajouter_a_memoire(msg, "Je vais m'en souvenir pour la prochaine fois.")  # Fallback final
    return ton_humain_reponse("Je ne connais pas encore la r√©ponse, mais je l'apprendrai pour toi !")