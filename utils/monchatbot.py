import random
import re
from difflib import get_close_matches
from utils.wikipedia_search import recherche_wikipedia
from utils.google_search import recherche_google
from utils.Calcul_Maths import resoudre_maths
from app.config import WIKI_TRIGGER, GOOGLE_TRIGGER, MATH_TRIGGER


# ‚úÖ Tol√©rance aux fautes
def texte_similaire(msg: str, expressions: list[str], seuil: float = 0.8) -> bool:
    return bool(get_close_matches(msg, expressions, n=1, cutoff=seuil))


# ‚úÖ Extrait la politesse + la question utile
def extraire_politesse_et_question(msg: str) -> tuple[str | None, str]:
    msg = msg.strip().lower()
    politesses = [
        "peux-tu", "peux tu", "pourrais-tu", "pourrais tu", "tu peux", "tu pourrais",
        "tu-peux", "s'il te pla√Æt", "stp", "svp", "sil te plait", "s il te plait",
        "est ce que", "est-ce que", "tu-pourrais", "donne moi", "m'aider","me donner","avoir"
    ]
    polie_trouv√©e = []
    for p in politesses:
        if p in msg:
            polie_trouv√©e.append(p)
            msg = msg.replace(p, "")
    propre = msg.strip()
    reponse_polie = None
    if polie_trouv√©e:
        reponse_polie = random.choice([
            "Bien s√ªr, je suis l√† pour √ßa !",
            "Avec plaisir üòä",
            "Oui bien s√ªr, je t‚Äôaide !",
            "Pas de souci, je te r√©ponds üëá",
            "Aucun probl√®me ! Voil√† ce que j‚Äôai trouv√© :"
        ])
    return reponse_polie, propre


# ‚úÖ R√©ponse humaine
def chatbot_reponse(texte: str, math_mode: bool = False) -> str:
    if math_mode:
        return texte
    r√©actions = [
        "üòä", "üëç", "√áa me fait plaisir de t'aider !", "Super question !",
        "Tu es brillant(e) !", "Hmm...", "Int√©ressant...", "Voyons voir...",
        "C'est une bonne question.", "Je r√©fl√©chis...",
        "Je ne suis pas une boule de cristal, mais je crois que c'est √ßa ! üòÇ",
        "Si j'avais un euro √† chaque fois qu'on me pose cette question... üí∏",
        "Je suis un bot, mais je commence √† comprendre les humains ! ü§ñ",
        "Je suis pas parfait, mais j'essaie ! üòÖ"
    ]
    return f"{random.choice(r√©actions)} {texte}"


# ‚úÖ Salutations
def detection_salutation(message: str) -> str | None:
    msg = message.lower().strip()
    if texte_similaire(msg, ["bonjour", "salut", "coucou", "hello", "hey", "bjr", "slut"]):
        return random.choice([
            "Bonjour ! Comment puis-je t'aider aujourd'hui ?",
            "Salut ! Ravi de te voir.",
            "Coucou ! Que puis-je faire pour toi ?"
        ])
    if texte_similaire(msg, [
        "√ßa va", "comment √ßa va", "comment sa va", "comment tu vas",
        "tu vas bien", "comment cava", "cv", "sava", "cava"
    ]):
        return random.choice([
            "√áa va bien, merci ! Et toi ?",
            "Je vais bien, merci ! Et toi, comment √ßa se passe ?",
            "Tout roule de mon c√¥t√©, et toi ?"
        ])
    if texte_similaire(msg, ["au revoir", "bye", "√† bient√¥t", "adieu", "aurevoir", "ciao","a plus"]):
        return random.choice([
            "Au revoir ! √Ä la prochaine !",
            "Bye ! Prends soin de toi.",
            "√Ä bient√¥t ! N'h√©site pas √† revenir."
        ])
    if texte_similaire(msg, ["merci", "merci beaucoup", "merci bien", "merki", "mercie","mrc"]):
        return random.choice([
            "Avec plaisir ! Si tu as d'autres questions, n'h√©site pas.",
            "De rien ! Je suis l√† pour √ßa.",
            "Pas de souci, c'est toujours un plaisir de t'aider !"
        ])
    return None


# ‚úÖ D√©tection maths
def Le_message_mathematique(msg: str) -> bool:
    msg = msg.lower()
    mots_cles = [
        "int(", "‚à´", "d√©rive", "d√©riv√©e", "int√©grale", "primitive", "lim", "limite",
        "r√©sous", "√©quation", "diff√©rentielle", "factorise", "racine", "polyn√¥me",
        "dx", "dy", "sin", "cos", "tan", "ln", "log", "e^", "x^", "x¬≤", "=", "‚â†", "<", ">"
    ]
    if any(m in msg for m in mots_cles):
        return True
    if re.match(r"^[\s\d\w\^\+\-\*\/\=\(\)]+$", msg) and any(c in msg for c in "=^"):
        return True
    return False

# ‚úÖ Contenu inappropri√©
def contient_contenu_inappropri√©(msg: str) -> bool:
    blacklist = [
        "con", "connard", "pute", "salop", "encul√©", "fdp", "ntm",
        "nique", "merde", "ta gueule", "tg", "salope", "batard"
    ]
    msg = msg.lower()
    return any(mot in msg for mot in blacklist)


# ‚úÖ Fonction principale
def obtenir_la_response(message: str) -> str:
    msg = message.strip()
    if not msg:
        return "Je n'ai pas bien saisi ta question, pourrais-tu reformuler s‚Äôil te pla√Æt ?"

    if contient_contenu_inappropri√©(msg):
        return "Je suis l√† pour t‚Äôaider, mais restons respectueux s‚Äôil te pla√Æt üòä"

    if (resp := detection_salutation(msg)):
        return resp

    reponse_polie, question = extraire_politesse_et_question(msg)

        # üåç Wikip√©dia (le mot peut √™tre avant ou apr√®s)
    if WIKI_TRIGGER in question.lower():
        cleaned_question = question.lower().replace(WIKI_TRIGGER, "")
        query = re.sub(
            r"\b(peux-tu|peux tu|pourrais-tu|pourrais tu|tu peux|tu pourrais|tu-peux|"
            r"s'il te pla√Æt|stp|svp|sil te plait|s il te plait|est ce que|est-ce que|"
            r"tu-pourrais|donne moi|m'aider|me donner|avoir|sur|dans|avec|la|le|"
            r"d√©finition|recherche|rechercher|de|du|des|je|tu|il|nous|vous|ils|elle|elles|pourrais|le|la)\b",
            "",
            cleaned_question
        )
        query = query.strip(" :!?.,\"'")
        if not query:
            return "Tu dois me dire ce que tu veux que je cherche sur Wikip√©dia."
        try:
            res = recherche_wikipedia(query)
            if isinstance(res, list):
            # ‚Üê Cas d'ambigu√Øt√© : on propose des suggestions
                return chatbot_reponse("Ta question est trop vague. Voici plusieurs sujets possibles :\n- " + "\n- ".join(res))
            if res:
                return f"{reponse_polie + ' ' if reponse_polie else ''}" + chatbot_reponse(f"Voici ce que j'ai trouv√© sur Wikip√©dia :\n{res}")
            return chatbot_reponse("D√©sol√©, rien trouv√© de pertinent sur Wikip√©dia.")
        except Exception as e:
            return chatbot_reponse(f"Erreur Wikip√©dia : {e}")

    # üåê Google (le mot peut √™tre avant ou apr√®s)
    if GOOGLE_TRIGGER in question.lower():
        cleaned_question = question.lower().replace(GOOGLE_TRIGGER, "")
        query = re.sub(
            r"\b(peux-tu|peux tu|pourrais-tu|pourrais tu|tu peux|tu pourrais|tu-peux|"
            r"s'il te pla√Æt|stp|svp|sil te plait|s il te plait|est ce que|est-ce que|"
            r"tu-pourrais|donne moi|m'aider|me donner|avoir|sur|dans|avec|la|le|"
            r"d√©finition|recherche|rechercher|de|du|des|je|tu|il|nous|vous|ils|elle|elles|pourrais|le|la)\b",
            "",
            cleaned_question
        )
        query = query.strip(" :!?.,\"'")
        if not query:
            return "Tu dois me dire ce que tu veux que je cherche sur Google."
        try:
            print(f"[DEBUG] Requ√™te Google nettoy√©e : {query}")
            res = recherche_google(query)
            if res:
                return f"{reponse_polie + ' ' if reponse_polie else ''}" + chatbot_reponse(f"Voici ce que j'ai trouv√© via Google :\n{res}")
            return chatbot_reponse("D√©sol√©, rien trouv√© de pertinent via Google.")
        except Exception as e:
            return chatbot_reponse(f"Erreur Google : {e}")

    # ‚ûï Maths
    if MATH_TRIGGER in question.lower():
        expression = question.lower().split(MATH_TRIGGER, 1)[-1].strip()
        if not expression:
            return chatbot_reponse("Tu dois m‚Äô√©crire une expression ou un probl√®me math√©matique √† r√©soudre.")
        try:
            solution = resoudre_maths(expression)
            return chatbot_reponse(solution, math_mode=True)
        except Exception as e:
            return chatbot_reponse(f"Erreur math√©matique : {e}")

    # üîÅ Par d√©faut
    suggestions = [
        "Je n‚Äôai pas trouv√© de r√©ponse pr√©cise, veux-tu que je cherche sur Google ?",
        "Hmm, rien dans mes connaissances‚Ä¶ veux-tu que j'essaie une recherche sur internet ?",
        "Je n'ai pas compris, tu peux reformuler ? Ou me dire si c‚Äôest une question Wikip√©dia, Google ou math√©matique.",
        "Pas certain de la r√©ponse üòï Tu veux que j‚Äôexplore un peu plus ?"
    ]
    return chatbot_reponse(random.choice(suggestions))